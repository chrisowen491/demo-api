AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  The tranmere5 stack

Globals:
  Function:
    Timeout: 3
    AutoPublishAlias: live

Parameters:
  EnvName:
    Type: String
    Default: sit1
    Description: The name of the environment to deploy to
    AllowedValues:
      - sit1
      - pre1
      - prod1
  S3BucketName:
    Type: String
    Default: tranmere-web-api 
  SwaggerFile:
    Type: String
    Default: swagger.yaml     

Mappings:
  SpecialFeature1:
    sit1:
      answer: 1      
    pre1:
      answer: 1
    prod1:
      answer: 1   

Resources:     

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Cors:
        AllowOrigin: "'*'"
      StageName: Prod
      Name: tranmere5
      GatewayResponses:
        UNAUTHORIZED:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        ACCESS_DENIED:
          StatusCode: 403
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        INVALID_API_KEY:
          StatusCode: 200
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'x-api-key,content-type'"
        MISSING_AUTHENTICATION_TOKEN:
          StatusCode: 403
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        DEFAULT_5XX:
          StatusCode: 500
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        RESOURCE_NOT_FOUND:
          StatusCode: 404
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location:
              Fn::Join:
                - ''
                - - 's3://'
                  - Ref: S3BucketName
                  - '/'
                  - Ref: SwaggerFile

  tranmere5:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src
      Handler: tranmere5.handler
      Runtime: nodejs12.x
      Environment:
        Variables:
          EnvironmentName: !Ref EnvName
          SpecialFeature: !FindInMap [SpecialFeature1, !Ref EnvName, answer]
      Events:
        PageRequest:
          Type: Api
          Properties:
            Path: /
            RestApiId: !Ref RestApi
            Method: get

  # This shouldn't be necerssary, but API Gateway often seems to lack permission on the lambda when using swagger definitions
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      SourceArn: 
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/GET/
      FunctionName: !Ref tranmere5
      Principal: apigateway.amazonaws.com

  StagingBasePathMapping:
    DependsOn: RestApiProdStage
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: tranmere5
      DomainName: !Sub "api.${EnvName}.tranmere-web.com"
      RestApiId: !Ref RestApi
      Stage: Prod

Outputs:
  Endpoint:
    Description: "API Gateway endpoint URL the endpoint"
    Value: !Sub "https://api.${EnvName}.tranmere-web.com/tranmere5/"
